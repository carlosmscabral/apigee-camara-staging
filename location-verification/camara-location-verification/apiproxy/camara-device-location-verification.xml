<APIProxy revision="1" name="camara-device-location-verification">
    <DisplayName></DisplayName>
    <Description>This API provides the consumer with the ability to verify the location of a device.&#xA;&#xA;# Introduction&#xA;&#xA;API consumers are able to verify whether the location of certain user device is within the area specified. Currently the only area supported as input is a circle determined by a set of coordinates (latitude and longitude) and some expected accuracy (radius).&#xA;&#xA;The verification result depends on the network&#39;s ability and accuracy to locate the device at the requested area.&#xA;&#xA;* If the network&#39;s estimation of the device&#39;s location is fully contained within the requested area, the verification result is `TRUE`.&#xA;* If the network&#39;s estimation of the device&#39;s location does not overlap with the requested area at all, the verification result is `FALSE`.&#xA;* If the network&#39;s estimation of the device&#39;s location partially overlaps with the requested area, or it fully contains the requested area (because it is larger), the result is &#39;PARTIAL&#39;. In this case, a `match_rate` is included in the response, indicating an estimation of the likelihood of the match in percent.&#xA;* Lastly, the network may not be able to locate the device. In this case, the verification result is `UNKNOWN`.&#xA;&#xA;The client may optionally include a `maxAge` indication. If the location information known to the server is older than the specified `maxAge`, an error 422 with code LOCATION_VERIFICATION.UNABLE_TO_FULFILL_MAX_AGE is sent back.&#xA;&#xA;`lastLocationTime` will be always included in the success response unless there is no historical location information available for the device. In this case, `UNKNOWN` will be returned without `lastLocationTime`.&#xA;&#xA;Location Verification could be useful in scenarios such as:&#xA;&#xA;- Fraud protection, to ensure a given user is located in the location area claimed for financial transactions.&#xA;- Verification of GPS coordinates reported by the app on a device, to ensure the GPS was not faked, e.g. for content delivery with regional restrictions.&#xA;- Contextual-based advertising, to trigger advertising after verifying the device is in the area of interest.&#xA;- Smart mobility (vehicle / bikes renting), to confirm the location of the device and the location of the vehicle/bike to guarantee they are rented correctly.&#xA;&#xA;# Relevant terms and definitions&#xA;&#xA;* **Device**: A device refers to any physical entity that can connect to a network and participate in network communication.&#xA;&#xA;* **Area**: It specifies the geographical surface where a device may be physically located.&#xA;&#xA; * **Max Age**: Maximum age of the location information which is accepted for the location verification (in seconds).&#xA;    * Absence of maxAge means &#34;any age&#34; is acceptable for the client. In other words, this is like maxAge=infinite. In this case the system will still return lastLocationTime, if available.&#xA;    * maxAge=0 means a fresh calculation is requested by the client. If the system is not able to provide the fresh location, an error 422 with code LOCATION_VERIFICATION.UNABLE_TO_FULFILL_MAX_AGE is sent back.&#xA;&#xA;&#xA;* **Verification**: Process triggered in the API server to confirm or contradict the expectation assumed by the API client about the device location.&#xA;&#xA;# API Functionality&#xA;&#xA;The API exposes a single endpoint/operation:&#xA;&#xA;- Verify whether the device location is within a requested area, currently a circle with center specified by the latitude and longitude, and radius specified by the accuracy. The operation returns a verification result and, optionally, a match rate estimation for the location verification in percent.&#xA;&#xA;# Authorization and authentication&#xA;&#xA;The &#34;Camara Security and Interoperability Profile&#34; provides details on how a client requests an access token. Please refer to Identify and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the Profile.&#xA;&#xA;Which specific authorization flows are to be used will be determined during onboarding process, happening between the API Client and the API Provider, taking into account the declared purpose for accessing the API, while also being subject to the prevailing legal framework dictated by local legislation.&#xA;&#xA;It is important to remark that in cases where personal user data is processed by the API, and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of 3-legged access tokens becomes mandatory. This measure ensures that the API remains in strict compliance with user privacy preferences and regulatory obligations, upholding the principles of transparency and user-centric data control.&#xA;&#xA;# Identifying a device from the access token&#xA;&#xA;This specification defines the `device` object field as optional in API requests, specifically in cases where the API is accessed using a 3-legged access token, and the device can be uniquely identified by the token. This approach simplifies API usage for API consumers by relying on the device information associated with the access token used to invoke the API.&#xA;&#xA;## Handling of device information:&#xA;&#xA;### Optional device object for 3-legged tokens:&#xA;&#xA;- When using a 3-legged access token, the device associated with the access token must be considered as the device for the API request. This means that the device object is not required in the request, and if included it must identify the same device, therefore **it is recommended NOT to include it in these scenarios** to simplify the API usage and avoid additional validations.&#xA;&#xA;### Validation mechanism:&#xA;&#xA;- The server will extract the device identification from the access token, if available.&#xA;- If the API request additionally includes a `device` object when using a 3-legged access token, the API will validate that the device identifier provided matches the one associated with the access token.&#xA;- If there is a mismatch, the API will respond with a 403 - INVALID_TOKEN_CONTEXT error, indicating that the device information in the request does not match the token.&#xA;&#xA;### Error handling for unidentifiable devices:&#xA;&#xA;- If the `device` object is not included in the request and the device information cannot be derived from the 3-legged access token, the server will return a 422 `UNIDENTIFIABLE_DEVICE` error.&#xA;&#xA;### Restrictions for tokens without an associated authenticated identifier:&#xA;&#xA;- For scenarios which do not have a single device identifier associated to the token during the authentication flow, e.g. 2-legged access tokens, the `device` object MUST be provided in the API request. This ensures that the device identification is explicit and valid for each API call made with these tokens.&#xA;&#xA;# Further info and support&#xA;&#xA;(FAQs will be added in a later version of the documentation)&#xA;</Description>
    <CreatedAt>1734088439400</CreatedAt>
    <LastModifiedAt>1734093184037</LastModifiedAt>
    <BasePaths>/camara/device/v0.2</BasePaths>
    <Policies>
        <Policy>OAuthV2.VerifyAccessToken</Policy>
    </Policies>
    <ProxyEndpoints>
        <ProxyEndpoint>default</ProxyEndpoint>
    </ProxyEndpoints>
    <TargetEndpoints>
        <TargetEndpoint>default</TargetEndpoint>
    </TargetEndpoints>
</APIProxy>